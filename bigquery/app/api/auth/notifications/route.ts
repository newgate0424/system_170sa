import { NextRequest } from 'next/server';
import { verifyJwt } from '@/lib/jwt';

// ‡πÄ‡∏Å‡πá‡∏ö active connections ‡∏ï‡∏≤‡∏° userId
const activeConnections = new Map<number, ReadableStreamDefaultController[]>();

export async function GET(request: NextRequest) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡∏à‡∏≤‡∏Å cookie
    const token = request.cookies.get('token')?.value;
    
    if (!token) {
      console.log('üîí No token provided for SSE connection');
      return new Response('Unauthorized', { 
        status: 401,
        headers: {
          'Content-Type': 'text/plain'
        }
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á token
    let decoded;
    try {
      decoded = verifyJwt(token);
    } catch (error) {
      console.log('üîí Invalid token for SSE connection:', error);
      return new Response('Unauthorized - Invalid token', { 
        status: 401,
        headers: {
          'Content-Type': 'text/plain'
        }
      });
    }

    const userId = Number(decoded.id || decoded.userId);
    
    if (!userId) {
      console.log('üîí No user ID in token for SSE connection');
      return new Response('Unauthorized - Invalid user', { 
        status: 401,
        headers: {
          'Content-Type': 'text/plain'
        }
      });
    }

    console.log(`üì° Starting SSE connection for user ${userId}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Server-Sent Events stream
    const stream = new ReadableStream({
      start(controller) {
        console.log(`üì° SSE connection established for user ${userId}`);
        
        // ‡πÄ‡∏Å‡πá‡∏ö controller ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if (!activeConnections.has(userId)) {
          activeConnections.set(userId, []);
        }
        activeConnections.get(userId)!.push(controller);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        const welcomeMessage = `data: ${JSON.stringify({
          type: 'connected',
          message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          timestamp: new Date().toISOString()
        })}\n\n`;
        controller.enqueue(new TextEncoder().encode(welcomeMessage));

        // ‡∏™‡πà‡∏á heartbeat ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        const heartbeat = setInterval(() => {
          try {
            controller.enqueue(new TextEncoder().encode(': heartbeat\n\n'));
          } catch (error) {
            clearInterval(heartbeat);
            // ‡∏•‡∏ö controller ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            removeController(userId, controller);
          }
        }, 30000);

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ connection ‡∏õ‡∏¥‡∏î
        request.signal.addEventListener('abort', () => {
          console.log(`üì° SSE connection closed for user ${userId}`);
          clearInterval(heartbeat);
          removeController(userId, controller);
        });
      }
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Cache-Control'
      }
    });

  } catch (error) {
    console.error('SSE setup error:', error);
    return new Response('Internal Server Error', { 
      status: 500,
      headers: {
        'Content-Type': 'text/plain'
      }
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏ö controller
function removeController(userId: number, controller: ReadableStreamDefaultController) {
  const controllers = activeConnections.get(userId) || [];
  const index = controllers.indexOf(controller);
  if (index > -1) {
    controllers.splice(index, 1);
  }
  if (controllers.length === 0) {
    activeConnections.delete(userId);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export function notifyUserSessions(userId: number, message: string, type: string = 'session_alert') {
  const controllers = activeConnections.get(userId) || [];
  
  if (controllers.length > 0) {
    console.log(`üîî Sending notification to ${controllers.length} connections for user ${userId}: ${message}`);
    
    const eventData = JSON.stringify({
      type,
      message,
      timestamp: new Date().toISOString()
    });

    const sseMessage = `event: ${type}\ndata: ${eventData}\n\n`;
    const encodedMessage = new TextEncoder().encode(sseMessage);

    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å controller ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
    controllers.forEach((controller, index) => {
      try {
        controller.enqueue(encodedMessage);
      } catch (error) {
        console.log(`‚ùå Failed to send notification to connection ${index}`);
        // ‡∏•‡∏ö controller ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ
        controllers.splice(index, 1);
      }
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ controller ‡∏ó‡∏µ‡πà active ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Map
    if (controllers.length === 0) {
      activeConnections.delete(userId);
    }
  } else {
    console.log(`üì≠ No active connections for user ${userId}`);
  }
}