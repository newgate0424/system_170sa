// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  role          Role           @default(EMPLOYEE)
  teams         Json           @default("[]")
  isLocked      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  activityLogs  ActivityLog[]
  loginAttempts LoginAttempt[]
  sessions      Session[]
  settings      UserSettings?
  
  @@index([username])
  @@index([role])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  userAgent    String?  @db.Text
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  theme                  String   @default("light")
  primaryColor           String   @default("blue")
  customPrimaryColor     String   @default("#3b82f6")
  backgroundColor        String   @default("gradient-blue")
  customBackgroundColor  String   @default("#ffffff")
  customGradientStart    String   @default("#667eea")
  customGradientEnd      String   @default("#764ba2")
  fontSize               String   @default("medium")
  customFontSize         Int?
  fontFamily             String   @default("inter")
  language               String   @default("th")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String   @db.Text
  metadata    Json?
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?
  username  String
  success   Boolean
  ipAddress String?
  userAgent String?  @db.Text
  attemptAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([username])
  @@index([attemptAt])
  @@index([success])
}
